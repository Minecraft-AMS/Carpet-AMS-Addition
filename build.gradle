plugins {
	id("maven-publish")
	id("com.github.hierynomus.license").version("${hierynomus_license_version}").apply(false)
	id("fabric-loom").version("${fabric_loom_version}").apply(false)
	id("com.replaymod.preprocess").version("${preprocess_version}")
}

preprocess {
	preprocess.strictExtraMappings.set(false)

	def mc116 = createNode('1.16.5', 1_16_05, 'yarn')
	def mc117 = createNode('1.17.1', 1_17_01, 'yarn')
	def mc118 = createNode('1.18.2', 1_18_02, 'yarn')
	def mc119 = createNode('1.19.4', 1_19_04, 'yarn')
	def mc1206 = createNode('1.20.6', 1_20_06, 'yarn')
	def mc121 = createNode('1.21', 1_21_00, 'yarn')
	def mc1211 = createNode('1.21.1', 1_21_01, 'yarn')
	def mc1212 = createNode('1.21.2', 1_21_02, 'yarn')
	def mc1213 = createNode('1.21.3', 1_21_03, 'yarn')
	def mc1214 = createNode('1.21.4', 1_21_04, 'yarn')
	def mc1215 = createNode('1.21.5', 1_21_05, 'yarn')
	def mc1216 = createNode('1.21.6', 1_21_06, 'yarn')
	def mc1217 = createNode('1.21.7', 1_21_07, 'yarn')
	def mc1218 = createNode('1.21.8', 1_21_08, 'yarn')

	mc117.link(mc116, file('versions/mapping-1.17-1.16.txt'))
	mc118.link(mc117, file('versions/mapping-1.18-1.17.txt'))
	mc118.link(mc119, file('versions/mapping-1.18-1.19.txt'))
	mc119.link(mc1206, file('versions/mapping-1.19-1.20.6.txt'))
	mc1206.link(mc121, file('versions/mapping-1.20.6-1.21.txt'))
	mc121.link(mc1211, file('versions/mapping-1.21-1.21.1.txt'))
	mc1211.link(mc1212, file('versions/mapping-1.21.1-1.21.2.txt'))
	mc1212.link(mc1213, file('versions/mapping-1.21.2-1.21.3.txt'))
	mc1213.link(mc1214, file('versions/mapping-1.21.3-1.21.4.txt'))
	mc1214.link(mc1215, file('versions/mapping-1.21.4-1.21.5.txt'))
	mc1215.link(mc1216, file('versions/mapping-1.21.5-1.21.6.txt'))
	mc1216.link(mc1217, file('versions/mapping-1.21.6-1.21.7.txt'))
	mc1217.link(mc1218, file('versions/mapping-1.21.7-1.21.8.txt'))
}

tasks.register('buildAndGather') {
	subprojects {
		dependsOn project.tasks.named('build').get()
	}
	doFirst {
		println 'Gathering builds'
		def buildLibs = {
			p -> p.buildDir.toPath().resolve('libs')
		}
		delete fileTree(buildLibs(rootProject)) {
			include '*'
		}
		subprojects {
			copy {
				from(buildLibs(project)) {
					include '*.jar'
					exclude '*-dev.jar', '*-sources.jar'
				}
				into buildLibs(rootProject)
				duplicatesStrategy DuplicatesStrategy.INCLUDE
			}
		}
	}
}
